pipeline {
  agent any
  environment {
    REGISTRY_URL    = "registry.gitlab.com/wealth-tracking-framework/wealth-tracking-framework"
    GITLAB_USER     = "aaron09912"
    DOCKER_BUILDKIT = "1"
  }

  stages {
    stage('Detect Architecture') {
      steps {
        script {
          ARCH = sh(returnStdout: true, script: "uname -m").trim()
          echo "Running on architecture: ${ARCH}"
        }
      }
    }

    stage('Setup QEMU Emulation (only if non-amd64)') {
      when {
        expression { return ARCH != "x86_64" }  // Skip if running on native AMD64
      }
      steps {
        sh '''
          echo "Non-amd64 detected, enabling QEMU for cross-build..."
          docker run --rm --privileged tonistiigi/binfmt --install all
        '''
      }
    }

    stage('Login to Registry') {
      steps {
        withCredentials([string(credentialsId: 'gitlab-registry-pat', variable: 'GITLAB_PAT')]) {
          sh '''
            echo "$GITLAB_PAT" \
              | docker login registry.gitlab.com \
                  -u "$GITLAB_USER" --password-stdin
          '''
        }
      }
    }

    stage('Build & Push Images') {
      steps {
        script {
          def services = ['wtf-node','wtf-react','wtf-coingecko','wtf-finnhub','wtf-jenkins']

          services.each { svc ->
            // Only build amd64 on server, multi-arch on Mac
            def platforms = (ARCH == "x86_64") ? "linux/amd64" : "linux/amd64,linux/arm64"

            sh """
              docker buildx build \
                --platform ${platforms} \
                -t ${REGISTRY_URL}/${svc}:latest \
                ${svc} \
                --push
            """
          }
        }
      }
    }
  }
}
