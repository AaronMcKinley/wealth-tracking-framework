pipeline {
  agent any

  options {
    timestamps()
    buildDiscarder(logRotator(numToKeepStr: '2', artifactNumToKeepStr: '0'))
  }

  environment {
    REGISTRY = "registry.gitlab.com/wealth-tracking-framework/wealth-tracking-framework"
    GITLAB_USER = "aaron09912"
  }

  stages {
    stage('Git checkout and pull main') {
      steps {
        dir('/opt/wealth-tracking-framework') {
          sh '''
            echo "Checking out main branch..."
            git checkout main
            echo "Resetting any local changes..."
            git reset --hard
            echo "Pulling latest from origin/main..."
            git pull origin main --ff-only
          '''
        }
      }
    }

    stage('Verify Files and Paths') {
      steps {
        dir('/opt/wealth-tracking-framework') {
          sh '''
            echo "Current working directory: $(pwd)"
            ls -al
            ls -al ./wtf-react
            ls -al ./wtf-node
            ls -al ./wtf-jenkins
            ls -al ./wtf-coingecko
            ls -al ./wtf-finnhub
          '''
        }
      }
    }

    stage('Login to GitLab Registry') {
      steps {
        withCredentials([string(credentialsId: 'gitlab-registry-pat', variable: 'GITLAB_PAT')]) {
          sh 'echo "$GITLAB_PAT" | docker login registry.gitlab.com -u aaron09912 --password-stdin'
        }
      }
    }

    stage('Build & Push Images') {
      steps {
        dir('/opt/wealth-tracking-framework') {
          script {
            def images = ['wtf-node','wtf-react','wtf-jenkins','wtf-coingecko','wtf-finnhub']
            images.each { img ->
              sh '''
                echo "Building ''' + "${img}" + '''..."
                DOCKER_BUILDKIT=1 docker build --pull -t ''' + "$REGISTRY/${img}:latest" + ''' ./''' + "${img}" + '''
                docker push ''' + "$REGISTRY/${img}:latest" + '''
              '''
            }
          }
        }
      }
    }

    stage('Docker Cleanup') {
      steps {
        sh '''
          echo "Light prune (keeps build cache warm)â€¦"
          docker image prune -f --filter "dangling=true" || true
          docker container prune -f --filter "until=24h" || true
          docker volume prune -f || true
          docker system df || true
        '''
      }
    }
  }

  post {
    always {
      cleanWs(deleteDirs: true)
    }
    success {
      echo 'Build and push completed successfully. Starting Deploy'
      build job: 'wtf-deploy', wait: false
    }
    failure {
      echo 'Build failed. Check the logs above for more details.'
    }
  }
}
