pipeline {
  agent any
  options {
    timestamps()
    buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '0'))
  }

  environment {
    CYPRESS_BASE_URL = "https://www.wealth-tracking-framework.com"
    REPORT_NAME = "E2E Tests"
    CYPRESS_WORKDIR = "wtf-cypress"
    CYPRESS_IMAGE = "custom-cypress:13.11"
    JUNIT_DIR = "wtf-cypress/cypress/results/junit"
    FAIL_DIR = "wtf-cypress/cypress/results/failures"
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Build Cypress Docker Image') {
      steps {
        dir("${CYPRESS_WORKDIR}") {
          sh "docker build --no-cache -t ${CYPRESS_IMAGE} ."
        }
      }
    }

    stage('Run Cypress E2E Tests') {
      steps {
        ansiColor('xterm') {
          catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
            sh '''
              mkdir -p "$WORKSPACE/$CYPRESS_WORKDIR/allure-results" \
                      "$WORKSPACE/$CYPRESS_WORKDIR/cypress/screenshots" \
                      "$WORKSPACE/$CYPRESS_WORKDIR/cypress/videos" \
                      "$WORKSPACE/$JUNIT_DIR"
              rm -rf "$WORKSPACE/$FAIL_DIR"
              mkdir -p "$WORKSPACE/$FAIL_DIR"

              bash -o pipefail -c 'docker run --rm \
                --shm-size=1g \
                -e XDG_RUNTIME_DIR=/tmp \
                -u $(id -u):$(id -g) \
                -e FORCE_COLOR=1 \
                -e CYPRESS_allure=true \
                -e CYPRESS_allureResultsPath=/allure-results \
                -e CYPRESS_baseUrl=$CYPRESS_BASE_URL \
                -v "$WORKSPACE/$CYPRESS_WORKDIR/allure-results:/allure-results" \
                -v "$WORKSPACE/$CYPRESS_WORKDIR/cypress/screenshots:/app/cypress/screenshots" \
                -v "$WORKSPACE/$CYPRESS_WORKDIR/cypress/videos:/app/cypress/videos" \
                -v "$WORKSPACE/$JUNIT_DIR:/app/$JUNIT_DIR" \
                -v "$WORKSPACE/$FAIL_DIR:/app/$FAIL_DIR" \
                $CYPRESS_IMAGE \
                cypress run --e2e --browser chrome --headless \
                  --reporter junit \
                  --reporter-options mochaFile=$JUNIT_DIR/results-[hash].xml,toConsole=false \
                  --spec cypress/e2e/infra/robots.cy.js,cypress/e2e/signup/signup.cy.js,cypress/e2e/login/login.cy.js,cypress/e2e/addinvestment/addinvestment.cy.js,cypress/e2e/savings/savings.cy.js,cypress/e2e/transactions/transactions.cy.js,cypress/e2e/sidebar/sidebar.cy.js,cypress/e2e/sample.cy.js,cypress/e2e/signup/delete-account.cy.js 2>&1 | tee "$WORKSPACE/$FAIL_DIR/cypress-run.log"'
            '''
          }
        }
      }
    }

    stage('Allure Report') {
      steps {
        dir("${CYPRESS_WORKDIR}") {
          allure([results: [[path: 'allure-results']], reportBuildPolicy: 'ALWAYS'])
        }
      }
    }

    stage('Create ticket on failure') {
      when { expression { currentBuild.currentResult in ['UNSTABLE','FAILURE'] } }
      steps {
        withCredentials([string(credentialsId: 'GH_TOKEN', variable: 'GH_TOKEN')]) {
          sh '''
            set -euo pipefail
            OWNER="AaronMcKinley"
            REPO="wealth-tracking-framework"
            JUNIT_DIR="wtf-cypress/cypress/results/junit"
            LOG_FILE="wtf-cypress/cypress/results/failures/cypress-run.log"
            BRANCH="${BRANCH_NAME:-$(git rev-parse --abbrev-ref HEAD || echo detached)}"
            SHA="$(git rev-parse --short=8 HEAD || echo unknown)"
            FAIL_COUNT=$(grep -Rho "<failure" "${JUNIT_DIR}"/*.xml 2>/dev/null | wc -l || true)
            if [ "${FAIL_COUNT}" -eq 0 ]; then
              echo "No JUnit <failure> elements found; skipping ticket."
              exit 0
            fi
            mkdir -p tmp
            BODY_FILE="tmp/issue.md"
            {
              echo "### Cypress failures in build #${BUILD_NUMBER} (${BRANCH})"
              echo
              echo "**Commit:** ${SHA}"
              echo "**Detected failures (JUnit):** ${FAIL_COUNT}"
              echo
              echo "**Links**"
              echo "- Build: ${BUILD_URL}"
              echo "- Videos: ${BUILD_URL}artifact/wtf-cypress/cypress/videos/"
              echo "- Screenshots: ${BUILD_URL}artifact/wtf-cypress/cypress/screenshots/"
              echo "- JUnit XMLs: ${BUILD_URL}artifact/${JUNIT_DIR}/"
              echo "- Cypress log: ${BUILD_URL}artifact/${LOG_FILE}"
            } > "${BODY_FILE}"
            if [ -f "${LOG_FILE}" ]; then
              tail -n 50 "${LOG_FILE}" | sed -r "s/\\x1B\\[[0-9;]*[mK]//g" > tmp/log_snip.txt || true
              {
                echo
                echo "<details><summary>Last 50 lines of cypress-run.log</summary>"
                echo
                echo '```text'
                cat tmp/log_snip.txt
                echo '```'
                echo "</details>"
              } >> "${BODY_FILE}"
            fi
            BODY_JSON=$(node -e "const fs=require('fs');process.stdout.write(JSON.stringify(fs.readFileSync(process.argv[1],'utf8')))" "${BODY_FILE}")
            TITLE="Cypress failures: build #${BUILD_NUMBER} on ${BRANCH}"
            curl -sS \
              -H "Authorization: token ${GH_TOKEN}" \
              -H "Accept: application/vnd.github+json" \
              -H "Content-Type: application/json" \
              --data "{\"title\": \"${TITLE}\", \"body\": ${BODY_JSON}}" \
              "https://api.github.com/repos/${OWNER}/${REPO}/issues" >/dev/null
            echo "Created GitHub issue for ${FAIL_COUNT} failures."
          '''
        }
      }
    }

    stage('Docker Cleanup') {
      steps {
        sh '''
          docker builder prune -af --filter "until=24h" || true
          docker image prune -af --filter "until=24h" || true
          docker container prune -f --filter "until=24h" || true
          docker volume prune -f || true
          docker system df || true
        '''
      }
    }
  }

  post {
    always {
      archiveArtifacts artifacts: """
        ${CYPRESS_WORKDIR}/cypress/videos/**,
        ${CYPRESS_WORKDIR}/cypress/screenshots/**,
        ${CYPRESS_WORKDIR}/allure-results/**,
        ${CYPRESS_WORKDIR}/allure-report/**,
        ${JUNIT_DIR}/** ${FAIL_DIR}/**
      """, excludes: '**/node_modules/**', allowEmptyArchive: true
      cleanWs(deleteDirs: true)
    }
  }
}
