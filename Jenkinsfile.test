pipeline {
  agent any
  options {
    timestamps()
    buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '0'))
  }

  environment {
    CYPRESS_BASE_URL = "https://www.wealth-tracking-framework.com"
    REPORT_NAME = "E2E Tests"
    CYPRESS_WORKDIR = "wtf-cypress"
    CYPRESS_IMAGE = "custom-cypress:13.11"
    JUNIT_DIR = "wtf-cypress/cypress/results/junit"
    FAIL_DIR = "wtf-cypress/cypress/results/failures"
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Build Cypress Docker Image') {
      steps {
        dir("${CYPRESS_WORKDIR}") {
          sh "docker build --no-cache -t ${CYPRESS_IMAGE} ."
        }
      }
    }

    stage('Run Cypress E2E Tests') {
      steps {
        ansiColor('xterm') {
          catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
            sh '''
              mkdir -p "$WORKSPACE/$CYPRESS_WORKDIR/allure-results" \
                      "$WORKSPACE/$CYPRESS_WORKDIR/cypress/screenshots" \
                      "$WORKSPACE/$CYPRESS_WORKDIR/cypress/videos" \
                      "$WORKSPACE/$JUNIT_DIR"
              rm -rf "$WORKSPACE/$FAIL_DIR"
              mkdir -p "$WORKSPACE/$FAIL_DIR"

              bash -o pipefail -c 'docker run --rm \
                --shm-size=1g \
                -e XDG_RUNTIME_DIR=/tmp \
                -u $(id -u):$(id -g) \
                -e FORCE_COLOR=1 \
                -e CYPRESS_allure=true \
                -e CYPRESS_allureResultsPath=/allure-results \
                -e CYPRESS_baseUrl=$CYPRESS_BASE_URL \
                -v "$WORKSPACE/$CYPRESS_WORKDIR/allure-results:/allure-results" \
                -v "$WORKSPACE/$CYPRESS_WORKDIR/cypress/screenshots:/app/cypress/screenshots" \
                -v "$WORKSPACE/$CYPRESS_WORKDIR/cypress/videos:/app/cypress/videos" \
                -v "$WORKSPACE/$JUNIT_DIR:/app/$JUNIT_DIR" \
                -v "$WORKSPACE/$FAIL_DIR:/app/$FAIL_DIR" \
                $CYPRESS_IMAGE \
                cypress run --e2e --browser chrome --headless \
                  --reporter junit \
                  --reporter-options mochaFile=$JUNIT_DIR/results-[hash].xml,toConsole=false \
                  --spec cypress/e2e/infra/robots.cy.js,cypress/e2e/signup/signup.cy.js,cypress/e2e/login/login.cy.js,cypress/e2e/addinvestment/addinvestment.cy.js,cypress/e2e/savings/savings.cy.js,cypress/e2e/transactions/transactions.cy.js,cypress/e2e/sidebar/sidebar.cy.js,cypress/e2e/sample.cy.js,cypress/e2e/signup/delete-account.cy.js 2>&1 | tee "$WORKSPACE/$FAIL_DIR/cypress-run.log"'
            '''
          }
        }
      }
    }

    stage('Allure Report') {
      steps {
        dir("${CYPRESS_WORKDIR}") {
          allure([results: [[path: 'allure-results']], reportBuildPolicy: 'ALWAYS'])
        }
      }
    }

    stage('Create ticket on failure') {
      when { expression { currentBuild.currentResult in ['UNSTABLE','FAILURE'] } }
      steps {
        withCredentials([string(credentialsId: 'GH_TOKEN', variable: 'GH_TOKEN')]) {
          sh '''
            bash -lc '
              OWNER="AaronMcKinley"
              REPO="wealth-tracking-framework"
              JUNIT_DIR="wtf-cypress/cypress/results/junit"
              FAIL_DIR="wtf-cypress/cypress/results/failures"
              FAIL_COUNT=$(grep -Eo '\''failures="([0-9]+)'\'' "$JUNIT_DIR"/*.xml 2>/dev/null | awk -F"\"" '\''{s+=$2} END{print s+0}'\'')
              if [ "${FAIL_COUNT:-0}" -eq 0 ]; then exit 0; fi
              BRANCH="${BRANCH_NAME:-$(git rev-parse --abbrev-ref HEAD 2>/dev/null || echo detached)}"
              SHA="$(git rev-parse --short=8 HEAD 2>/dev/null || echo unknown)"
              TITLE="E2E failures: build #${BUILD_NUMBER} on ${BRANCH}"
              BODY="Build #${BUILD_NUMBER} on ${BRANCH} has ${FAIL_COUNT} failing test(s).\\nCommit: ${SHA}\\nBuild: ${BUILD_URL}\\nScreenshots: ${BUILD_URL}artifact/wtf-cypress/cypress/screenshots/\\nJUnit: ${BUILD_URL}artifact/${JUNIT_DIR}/\\nLog: ${BUILD_URL}artifact/${FAIL_DIR}/cypress-run.log"
              JSON="{\\"title\\":\\"$TITLE\\",\\"body\\":\\"$BODY\\"}"
              curl -sSf -X POST -H "Authorization: token $GH_TOKEN" -H "Accept: application/vnd.github+json" https://api.github.com/repos/${OWNER}/${REPO}/issues -d "$JSON" >/dev/null
              echo "GitHub issue created"
            '
          '''
        }
      }
    }

    stage('Docker Cleanup') {
      steps {
        sh '''
          docker builder prune -af --filter "until=24h" || true
          docker image prune -af --filter "until=24h" || true
          docker container prune -f --filter "until=24h" || true
          docker volume prune -f || true
          docker system df || true
        '''
      }
    }
  }

  post {
    always {
      archiveArtifacts artifacts: """
        ${CYPRESS_WORKDIR}/cypress/videos/**,
        ${CYPRESS_WORKDIR}/cypress/screenshots/**,
        ${CYPRESS_WORKDIR}/allure-results/**,
        ${CYPRESS_WORKDIR}/allure-report/**,
        ${JUNIT_DIR}/** ${FAIL_DIR}/**
      """, excludes: '**/node_modules/**', allowEmptyArchive: true
      cleanWs(deleteDirs: true)
    }
  }
}
