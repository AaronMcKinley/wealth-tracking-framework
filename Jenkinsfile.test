pipeline {
  agent any

  options {
    timestamps()
    buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '0'))
  }

  environment {
    CYPRESS_BASE_URL = "https://www.wealth-tracking-framework.com"
    REPORT_NAME      = "E2E Tests"
    CYPRESS_WORKDIR  = "wtf-cypress"
    CYPRESS_IMAGE    = "custom-cypress:13.11"
    JUNIT_DIR        = "wtf-cypress/cypress/results/junit"
    FAIL_DIR         = "wtf-cypress/cypress/results/failures"
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Build Cypress Docker Image') {
      steps {
        dir("${CYPRESS_WORKDIR}") {
          sh "docker build --no-cache -t ${CYPRESS_IMAGE} ."
        }
      }
    }

    stage('Run Cypress E2E Tests') {
      steps {
        ansiColor('xterm') {
          catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
            sh '''
              mkdir -p "$WORKSPACE/$CYPRESS_WORKDIR/allure-results" \
                       "$WORKSPACE/$CYPRESS_WORKDIR/cypress/screenshots" \
                       "$WORKSPACE/$CYPRESS_WORKDIR/cypress/videos" \
                       "$WORKSPACE/$JUNIT_DIR"
              rm -rf "$WORKSPACE/$FAIL_DIR"
              mkdir -p "$WORKSPACE/$FAIL_DIR"

              docker run --rm \
                --shm-size=1g \
                -e XDG_RUNTIME_DIR=/tmp \
                -u $(id -u):$(id -g) \
                -e FORCE_COLOR=1 \
                -e CYPRESS_allure=true \
                -e CYPRESS_allureResultsPath=/allure-results \
                -e CYPRESS_baseUrl=$CYPRESS_BASE_URL \
                -v "$WORKSPACE/$CYPRESS_WORKDIR/allure-results:/allure-results" \
                -v "$WORKSPACE/$CYPRESS_WORKDIR/cypress/screenshots:/app/cypress/screenshots" \
                -v "$WORKSPACE/$CYPRESS_WORKDIR/cypress/videos:/app/cypress/videos" \
                -v "$WORKSPACE/$JUNIT_DIR:/app/$JUNIT_DIR" \
                -v "$WORKSPACE/$FAIL_DIR:/app/$FAIL_DIR" \
                $CYPRESS_IMAGE \
                cypress run --e2e --browser chrome --headless \
                  --reporter junit \
                  --reporter-options mochaFile=$JUNIT_DIR/results-[hash].xml,toConsole=false \
                  --spec cypress/e2e/infra/robots.cy.js,cypress/e2e/signup/signup.cy.js,cypress/e2e/login/login.cy.js,cypress/e2e/addinvestment/addinvestment.cy.js,cypress/e2e/savings/savings.cy.js,cypress/e2e/transactions/transactions.cy.js,cypress/e2e/sidebar/sidebar.cy.js,cypress/e2e/sample.cy.js,cypress/e2e/signup/delete-account.cy.js
            '''
          }
        }
      }
    }

    stage('Allure Report') {
      steps {
        dir("${CYPRESS_WORKDIR}") {
          allure([
            results: [[path: 'allure-results']],
            reportBuildPolicy: 'ALWAYS'
          ])
        }
      }
    }

    stage('Create GitHub ticket from console logs') {
      when {
        expression { currentBuild.currentResult == 'UNSTABLE' }
      }
      steps {
        withCredentials([string(credentialsId: 'GH_TOKEN', variable: 'GH_TOKEN')]) {
          catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
            sh '''
              set -eu

              OWNER="AaronMcKinley"
              REPO="wealth-tracking-framework"

              mkdir -p "$FAIL_DIR"

              LOG_PATH="$FAIL_DIR/cypress-ansi.log"
              ARTIFACT_REL_PATH="$LOG_PATH"
              MAX_LINES="${MAX_LINES:-800}"

              if curl -fsSL "${BUILD_URL}consoleText" -o "$FAIL_DIR/console.txt"; then :; else echo "WARN: could not fetch consoleText" >&2; fi

              if [ -s "$FAIL_DIR/console.txt" ]; then
                awk '
                  BEGIN { inblk=0; have=0; buf="" }
                  index($0,"(Run Starting)") { inblk=1 }
                  { if (inblk) buf = buf $0 ORS }
                  index($0,"(Run Finished)") && inblk { have=1; inblk=0; last=buf }
                  END { if (have) printf "%s", last }
                ' "$FAIL_DIR/console.txt" > "$LOG_PATH" || true
              fi

              if [ ! -s "$LOG_PATH" ]; then
                if [ -s "$FAIL_DIR/console.txt" ]; then
                  mv "$FAIL_DIR/console.txt" "$LOG_PATH"
                else
                  printf "No consoleText available at %sconsoleText\n" "$BUILD_URL" > "$LOG_PATH"
                fi
              fi

              FAILED=0
              if grep -Eq '(^|[[:space:]])Failing:[[:space:]]+[1-9]' "$LOG_PATH" || \
                 grep -Eq '([1-9][0-9]*)[[:space:]]+of[[:space:]]+[0-9]+[[:space:]]+failed' "$LOG_PATH"; then
                FAILED=1
              fi

              TITLE="Cypress result in build #${BUILD_NUMBER} $( [ "$FAILED" = "1" ] && echo FAILED || echo UNSTABLE )"
              ARTIFACT_URL="${BUILD_URL}artifact/${ARTIFACT_REL_PATH}"
              PREVIEW="$(tail -n "$MAX_LINES" "$LOG_PATH" || true)"

              BODY=$(cat <<EOF
Build: ${BUILD_URL}
Log file (ANSI kept): ${ARTIFACT_URL}

Preview (last ${MAX_LINES} lines):

\`\`\`
${PREVIEW}
\`\`\`
EOF
)

              TITLE_ESC="$(printf "%s" "$TITLE" | tr '\n' ' ' | sed 's/\\\\/\\\\\\\\/g; s/"/\\\\\\"/g')"
              BODY_ESC="$(printf "%s" "$BODY"  | sed 's/\\\\/\\\\\\\\/g; s/"/\\\\\\"/g; s/\\r//g; :a;N;$!ba; s/\\n/\\\\n/g')"
              JSON_PAYLOAD="$(printf '{"title":"%s","body":"%s","labels":["bug","e2e"]}' "$TITLE_ESC" "$BODY_ESC")"

              HTTP="$(curl -sS -o resp.json -w '%{http_code}' \
                -H "Authorization: token ${GH_TOKEN}" \
                -H "Accept: application/vnd.github+json" \
                --data-binary "$JSON_PAYLOAD" \
                "https://api.github.com/repos/${OWNER}/${REPO}/issues" || true)"

              echo "GitHub API HTTP status: $HTTP"
              if [ "$HTTP" -ge 200 ] && [ "$HTTP" -lt 300 ]; then
                ISSUE_URL="$(grep -o '"html_url": *"[^"]*"' resp.json | head -1 | cut -d'"' -f4 || true)"
                echo "Created issue: ${ISSUE_URL:-<no url found>}"
              else
                echo "Create issue failed; response follows:"
                sed -n '1,200p' resp.json || true
                exit 1
              fi
            '''
          }
        }
      }
      post {
        always {
          archiveArtifacts artifacts: "${FAIL_DIR}/cypress-ansi.log", allowEmptyArchive: true
        }
      }
    }

    stage('Docker Cleanup') {
      steps {
        sh '''
          docker builder prune -af --filter "until=24h" || true
          docker image prune -af --filter "until=24h" || true
          docker container prune -f --filter "until=24h" || true
          docker volume prune -f || true
          docker system df || true
        '''
      }
    }
  }

  post {
    always {
      archiveArtifacts artifacts: """
        ${CYPRESS_WORKDIR}/cypress/videos/**,
        ${CYPRESS_WORKDIR}/cypress/screenshots/**,
        ${CYPRESS_WORKDIR}/allure-results/**,
        ${CYPRESS_WORKDIR}/allure-report/**,
        ${JUNIT_DIR}/**,
        ${FAIL_DIR}/**
      """,
      excludes: '**/node_modules/**',
      allowEmptyArchive: true

      cleanWs(deleteDirs: true)
    }
  }
}
