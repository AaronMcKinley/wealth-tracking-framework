pipeline {
  agent any
  options {
    timestamps()
    buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '0'))
  }

  environment {
    CYPRESS_BASE_URL = "https://www.wealth-tracking-framework.com"
    REPORT_NAME = "E2E Tests"
    CYPRESS_WORKDIR = "wtf-cypress"
    CYPRESS_IMAGE = "custom-cypress:13.11"
    JUNIT_DIR = "wtf-cypress/cypress/results/junit"
    FAIL_DIR = "wtf-cypress/cypress/results/failures"
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Build Cypress Docker Image') {
      steps {
        dir("${CYPRESS_WORKDIR}") {
          sh "docker build --no-cache -t ${CYPRESS_IMAGE} ."
        }
      }
    }

    stage('Run Cypress E2E Tests') {
      steps {
        ansiColor('xterm') {
          catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
            sh '''
              mkdir -p "$WORKSPACE/$CYPRESS_WORKDIR/allure-results" \
                      "$WORKSPACE/$CYPRESS_WORKDIR/cypress/screenshots" \
                      "$WORKSPACE/$CYPRESS_WORKDIR/cypress/videos" \
                      "$WORKSPACE/$JUNIT_DIR"
              rm -rf "$WORKSPACE/$FAIL_DIR"
              mkdir -p "$WORKSPACE/$FAIL_DIR"

              bash -o pipefail -c 'docker run --rm \
                --shm-size=1g \
                -e XDG_RUNTIME_DIR=/tmp \
                -u $(id -u):$(id -g) \
                -e FORCE_COLOR=1 \
                -e CYPRESS_allure=true \
                -e CYPRESS_allureResultsPath=/allure-results \
                -e CYPRESS_baseUrl=$CYPRESS_BASE_URL \
                -v "$WORKSPACE/$CYPRESS_WORKDIR/allure-results:/allure-results" \
                -v "$WORKSPACE/$CYPRESS_WORKDIR/cypress/screenshots:/app/cypress/screenshots" \
                -v "$WORKSPACE/$CYPRESS_WORKDIR/cypress/videos:/app/cypress/videos" \
                -v "$WORKSPACE/$JUNIT_DIR:/app/$JUNIT_DIR" \
                -v "$WORKSPACE/$FAIL_DIR:/app/$FAIL_DIR" \
                $CYPRESS_IMAGE \
                cypress run --e2e --browser chrome --headless \
                  --reporter junit \
                  --reporter-options mochaFile=$JUNIT_DIR/results-[hash].xml,toConsole=false \
                  --spec cypress/e2e/infra/robots.cy.js,cypress/e2e/signup/signup.cy.js,cypress/e2e/login/login.cy.js,cypress/e2e/addinvestment/addinvestment.cy.js,cypress/e2e/savings/savings.cy.js,cypress/e2e/transactions/transactions.cy.js,cypress/e2e/sidebar/sidebar.cy.js,cypress/e2e/sample.cy.js,cypress/e2e/signup/delete-account.cy.js 2>&1 | tee "$WORKSPACE/$FAIL_DIR/cypress-run.log"'
            '''
          }
        }
      }
    }

    stage('Allure Report') {
      steps {
        dir("${CYPRESS_WORKDIR}") {
          allure([results: [[path: 'allure-results']], reportBuildPolicy: 'ALWAYS'])
        }
      }
    }

    stage('Create GitHub ticket') {
      when { expression { currentBuild.currentResult == 'UNSTABLE' } }
      steps {
        withCredentials([string(credentialsId: 'GH_TOKEN', variable: 'GH_TOKEN')]) {
          sh '''
            set -eu
            OWNER="AaronMcKinley"
            REPO="wealth-tracking-framework"

            BRANCH="${BRANCH_NAME:-$(git rev-parse --abbrev-ref HEAD 2>/dev/null || echo unknown)}"
            SHORT_SHA="${GIT_COMMIT:-$(git rev-parse --short HEAD 2>/dev/null || echo unknown)}"

            ALLURE_URL="${BUILD_URL}allure"
            VIDEOS_URL="${BUILD_URL}artifact/${CYPRESS_WORKDIR}/cypress/videos/"
            SCREENSHOTS_URL="${BUILD_URL}artifact/${CYPRESS_WORKDIR}/cypress/screenshots/"
            JUNIT_URL="${BUILD_URL}artifact/${JUNIT_DIR}/"
            LOG_URL="${BUILD_URL}artifact/${FAIL_DIR}/cypress-run.log"

            FAIL_COUNT="$(grep -Rsl "<failure" "$JUNIT_DIR" 2>/dev/null | wc -l || true)"

            SNIP=""
            if [ -f "$FAIL_DIR/cypress-run.log" ]; then
              SNIP="$(tail -n 200 "$FAIL_DIR/cypress-run.log" || true)"
            fi

            TITLE="E2E failure on ${BRANCH} (#${BUILD_NUMBER})"
            BODY="Build: ${BUILD_URL}\nBranch: ${BRANCH}\nCommit: ${SHORT_SHA}\n\nAllure: ${ALLURE_URL}\nVideos: ${VIDEOS_URL}\nScreenshots: ${SCREENSHOTS_URL}\nJUnit: ${JUNIT_URL}\nLog: ${LOG_URL}\n\nFailed test files detected: ${FAIL_COUNT}\n\nCypress tail (last 200 lines):\n```\n${SNIP}\n```"
            [ -n "${GH_MENTION:-}" ] && BODY="${BODY}\n\n/cc @${GH_MENTION}"

            TITLE_ESC="$(printf "%s" "$TITLE" | tr '\n' ' ' | sed 's/\\\\/\\\\\\\\/g; s/"/\\\\"/g')"
            BODY_ESC="$(printf "%s" "$BODY"  | sed 's/\\\\/\\\\\\\\/g; s/"/\\\\"/g; s/\\r//g; :a;N;$!ba; s/\\n/\\\\n/g')"
            JSON_PAYLOAD="$(printf '{"title":"%s","body":"%s","labels":["bug","e2e"]}' "$TITLE_ESC" "$BODY_ESC")"

            HTTP="$(curl -sS -o resp.json -w '%{http_code}' \
              -H "Authorization: token ${GH_TOKEN}" \
              -H "Accept: application/vnd.github+json" \
              --data-binary "$JSON_PAYLOAD" \
              "https://api.github.com/repos/${OWNER}/${REPO}/issues" || true)"
            echo "GitHub API HTTP status: $HTTP"
            if [ "$HTTP" -ge 200 ] && [ "$HTTP" -lt 300 ]; then
              ISSUE_URL="$(grep -o '"html_url": *"[^"]*"' resp.json | head -1 | cut -d'"' -f4 || true)"
              echo "Created issue: ${ISSUE_URL:-<no url found>}"
            else
              echo "Create issue failed; response follows:"
              sed -n '1,200p' resp.json || true
              exit 1
            fi
          '''
        }
      }
    }

    stage('Docker Cleanup') {
      steps {
        sh '''
          docker builder prune -af --filter "until=24h" || true
          docker image prune -af --filter "until=24h" || true
          docker container prune -f --filter "until=24h" || true
          docker volume prune -f || true
          docker system df || true
        '''
      }
    }
  }

  post {
    always {
      archiveArtifacts artifacts: """
        ${CYPRESS_WORKDIR}/cypress/videos/**,
        ${CYPRESS_WORKDIR}/cypress/screenshots/**,
        ${CYPRESS_WORKDIR}/allure-results/**,
        ${CYPRESS_WORKDIR}/allure-report/**,
        ${JUNIT_DIR}/** ${FAIL_DIR}/**
      """, excludes: '**/node_modules/**', allowEmptyArchive: true
      cleanWs(deleteDirs: true)
    }
  }
}
