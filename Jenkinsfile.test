pipeline {
  agent any

  options {
    timestamps()
    buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '0'))
  }

  environment {
    CYPRESS_BASE_URL = "https://www.wealth-tracking-framework.com"
    REPORT_NAME      = "E2E Tests"
    CYPRESS_WORKDIR  = "wtf-cypress"
    CYPRESS_IMAGE    = "custom-cypress:13.11"
    JUNIT_DIR        = "wtf-cypress/cypress/results/junit"
    FAIL_DIR         = "wtf-cypress/cypress/results/failures"
  }

  stages {
    stage('Checkout') {
      steps { checkout scm }
    }

    stage('Build Cypress Docker Image') {
      steps {
        dir("${CYPRESS_WORKDIR}") {
          sh "docker build --no-cache -t ${CYPRESS_IMAGE} ."
        }
      }
    }

    stage('Run Cypress E2E Tests') {
      steps {
        ansiColor('xterm') {
          catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
            sh '''
              set -e
              mkdir -p "$WORKSPACE/$CYPRESS_WORKDIR/allure-results" \
                       "$WORKSPACE/$CYPRESS_WORKDIR/cypress/screenshots" \
                       "$WORKSPACE/$CYPRESS_WORKDIR/cypress/videos" \
                       "$WORKSPACE/$JUNIT_DIR"
              rm -rf "$WORKSPACE/$FAIL_DIR"
              mkdir -p "$WORKSPACE/$FAIL_DIR"

              CID="cypress_run_${BUILD_NUMBER}"
              docker rm -f "$CID" >/dev/null 2>&1 || true

              docker run \
                --name "$CID" \
                --shm-size=1g \
                -e XDG_RUNTIME_DIR=/tmp \
                -u 0:0 \
                -e FORCE_COLOR=1 \
                -e CYPRESS_allure=true \
                -e CYPRESS_allureResultsPath=/allure-results \
                -e CYPRESS_baseUrl=$CYPRESS_BASE_URL \
                -v "$WORKSPACE/$CYPRESS_WORKDIR/allure-results:/allure-results" \
                -v "$WORKSPACE/$CYPRESS_WORKDIR/cypress/screenshots:/app/cypress/screenshots" \
                -v "$WORKSPACE/$CYPRESS_WORKDIR/cypress/videos:/app/cypress/videos" \
                -v "$WORKSPACE/$JUNIT_DIR:/app/$JUNIT_DIR" \
                ${CYPRESS_IMAGE} \
                cypress run --e2e --browser chrome --headless \
                  --reporter junit \
                  --reporter-options mochaFile=$JUNIT_DIR/results-[hash].xml,toConsole=false \
                  --spec "cypress/e2e/infra/robots.cy.js,cypress/e2e/signup/signup.cy.js,cypress/e2e/login/login.cy.js,cypress/e2e/addinvestment/addinvestment.cy.js,cypress/e2e/savings/savings.cy.js,cypress/e2e/transactions/transactions.cy.js,cypress/e2e/sidebar/sidebar.cy.js,cypress/e2e/sample.cy.js,cypress/e2e/signup/delete-account.cy.js" || true

              EXIT="$(docker wait "$CID" || true)"
              docker logs "$CID" > "$WORKSPACE/cypress-run.log" 2>&1 || true

              awk '/\\(Run Starting\\)/, /\\(Run Finished\\)/' "$WORKSPACE/cypress-run.log" > "$WORKSPACE/cypress-log-snippet.txt" || true
              if [ ! -s "$WORKSPACE/cypress-log-snippet.txt" ]; then
                tail -n 2000 "$WORKSPACE/cypress-run.log" > "$WORKSPACE/cypress-log-snippet.txt" || true
              fi

              docker rm "$CID" >/dev/null 2>&1 || true
              [ "$EXIT" = "0" ]
            '''
          }
        }
      }
    }

    stage('Allure Report') {
      steps {
        dir("${CYPRESS_WORKDIR}") {
          allure([
            results: [[path: 'allure-results']],
            reportBuildPolicy: 'ALWAYS'
          ])
        }
      }
    }

    stage('Create GitHub ticket for failures') {
      when { expression { currentBuild.currentResult == 'UNSTABLE' || currentBuild.currentResult == 'FAILURE' } }
      steps {
        withCredentials([string(credentialsId: 'GH_TOKEN', variable: 'GH_TOKEN')]) {
          catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
            sh '''
              set -eu
              OWNER="AaronMcKinley"
              REPO="wealth-tracking-framework"

              LOG_SNIP="$WORKSPACE/cypress-log-snippet.txt"
              if [ ! -s "$LOG_SNIP" ]; then
                echo "No Cypress log snippet found." > "$LOG_SNIP"
              fi

              TITLE="Cypress failures in build #${BUILD_NUMBER}"
              BODY="$(printf 'Build: %s\\n\\nCypress log:\\n\\n```\\n%s\\n```' "${BUILD_URL}" "$(sed 's/\\r//g' "$LOG_SNIP")")"

              TITLE_ESC="$(printf '%s' "$TITLE" | sed 's/\\\\/\\\\\\\\/g; s/"/\\\\\\"/g')"
              BODY_ESC="$(printf '%s' "$BODY"  | sed 's/\\\\/\\\\\\\\/g; s/"/\\\\\\"/g; :a;N;$!ba; s/\\n/\\\\n/g')"

              printf '{"title":"%s","body":"%s","labels":["bug","e2e"]}' "$TITLE_ESC" "$BODY_ESC" > payload.json

              echo "Posting issue to ${OWNER}/${REPO} â€¦"
              HTTP="$(curl -sS -o resp.json -w '%{http_code}' \
                -H "Authorization: token ${GH_TOKEN}" \
                -H "Accept: application/vnd.github+json" \
                --data-binary @payload.json \
                "https://api.github.com/repos/${OWNER}/${REPO}/issues" || true)"
              echo "GitHub API HTTP status: $HTTP"

              if [ "$HTTP" -lt 200 ] || [ "$HTTP" -ge 300 ]; then
                echo "Create issue failed; response follows:"
                sed -n '1,200p' resp.json || true
                exit 1
              fi

              ISSUE_URL="$(grep -o '"html_url": *"[^"]*"' resp.json | head -1 | cut -d'"' -f4 || true)"
              echo "Created issue: ${ISSUE_URL:-<no url found>}"
            '''
          }
        }
      }
    }

    stage('Docker Cleanup') {
      steps {
        sh '''
          docker builder prune -af --filter "until=24h" || true
          docker image prune   -af --filter "until=24h" || true
          docker container prune -f --filter "until=24h" || true
          docker volume prune -f || true
          docker system df || true
        '''
      }
    }
  }

  post {
    always {
      archiveArtifacts artifacts: """
        ${CYPRESS_WORKDIR}/cypress/videos/**,
        ${CYPRESS_WORKDIR}/cypress/screenshots/**,
        ${CYPRESS_WORKDIR}/allure-results/**,
        ${CYPRESS_WORKDIR}/allure-report/**,
        ${JUNIT_DIR}/**,
        ${FAIL_DIR}/**,
        cypress-run.log,
        cypress-log-snippet.txt,
        payload.json,
        resp.json
      """, excludes: '**/node_modules/**', allowEmptyArchive: true
      cleanWs(deleteDirs: true)
    }
  }
}
