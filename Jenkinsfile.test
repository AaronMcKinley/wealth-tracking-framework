pipeline {
  agent any

  options {
    timestamps()
    buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '0'))
  }

  environment {
    CYPRESS_BASE_URL = "https://www.wealth-tracking-framework.com"
    REPORT_NAME      = "E2E Tests"
    CYPRESS_WORKDIR  = "wtf-cypress"
    CYPRESS_IMAGE    = "custom-cypress:13.11"
    JUNIT_DIR        = "wtf-cypress/cypress/results/junit"
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Build Cypress Docker Image') {
      steps {
        dir("${CYPRESS_WORKDIR}") {
          sh "docker build --no-cache -t ${CYPRESS_IMAGE} ."
        }
      }
    }

    stage('Run Cypress E2E Tests') {
      steps {
        ansiColor('xterm') {
          catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
            sh '''
              mkdir -p "$WORKSPACE/$CYPRESS_WORKDIR/allure-results" \
                       "$WORKSPACE/$CYPRESS_WORKDIR/cypress/screenshots" \
                       "$WORKSPACE/$CYPRESS_WORKDIR/cypress/videos" \
                       "$WORKSPACE/$CYPRESS_WORKDIR/cypress/results/junit"

              docker run --rm \
                --shm-size=1g \
                -e XDG_RUNTIME_DIR=/tmp \
                -u $(id -u):$(id -g) \
                -e FORCE_COLOR=1 \
                -e CYPRESS_allure=true \
                -e CYPRESS_allureResultsPath=/allure-results \
                -e CYPRESS_baseUrl=$CYPRESS_BASE_URL \
                -v "$WORKSPACE/$CYPRESS_WORKDIR/allure-results:/allure-results" \
                -v "$WORKSPACE/$CYPRESS_WORKDIR/cypress/screenshots:/app/cypress/screenshots" \
                -v "$WORKSPACE/$CYPRESS_WORKDIR/cypress/videos:/app/cypress/videos" \
                -v "$WORKSPACE/$CYPRESS_WORKDIR/cypress/results/junit:/app/cypress/results/junit" \
                $CYPRESS_IMAGE \
                cypress run --e2e --browser chrome --headless \
                  --reporter junit \
                  --reporter-options mochaFile=cypress/results/junit/results-[hash].xml,toConsole=false \
                  --spec "cypress/e2e/infra/robots.cy.js,cypress/e2e/signup/signup.cy.js,cypress/e2e/login/login.cy.js,cypress/e2e/addinvestment/addinvestment.cy.js,cypress/e2e/savings/savings.cy.js,cypress/e2e/transactions/transactions.cy.js,cypress/e2e/sidebar/sidebar.cy.js,cypress/e2e/sample.cy.js,cypress/e2e/signup/delete-account.cy.js"
            '''
          }
        }
      }
    }

    stage('Allure Report') {
      steps {
        dir("${CYPRESS_WORKDIR}") {
          allure([
            results: [[path: 'allure-results']],
            reportBuildPolicy: 'ALWAYS'
          ])
        }
      }
    }

    stage('Create GitHub ticket for failures') {
      when { expression { currentBuild.currentResult == 'UNSTABLE' } }
      steps {
        withCredentials([string(credentialsId: 'GH_TOKEN', variable: 'GH_TOKEN')]) {
          catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
            sh '''
              set -eu
              OWNER="AaronMcKinley"
              REPO="wealth-tracking-framework"

              FAIL_XML=""
              if ls "${JUNIT_DIR}"/*.xml >/dev/null 2>&1; then
                FAIL_XML=$(grep -Rl '<failure' "${JUNIT_DIR}" || true | head -1)
                if [ -z "${FAIL_XML}" ]; then
                  FAIL_XML=$(grep -Rl 'failures="[1-9][0-9]*"' "${JUNIT_DIR}" || true | head -1)
                fi
                if [ -z "${FAIL_XML}" ]; then
                  FAIL_XML=$(ls -t "${JUNIT_DIR}"/*.xml 2>/dev/null | head -1 || true)
                fi
              fi

              SPEC="unknown"
              TEST_NAME="Unknown test"
              MSG="none"

              if [ -n "${FAIL_XML}" ] && [ -f "${FAIL_XML}" ]; then
                echo "Parsing JUnit: ${FAIL_XML}"
                ONE=$(tr '\\n' ' ' < "$FAIL_XML" | sed 's/[[:space:]]\\+/ /g; s/>[[:space:]]*</></g')

                TEST_NAME=$(printf "%s" "$ONE" | sed -n 's/.*<testcase[^>]*name="\\([^"]*\\)".*<failure[^>]*>.*/\\1/p' | head -1 || true)
                CLASS=$(printf "%s" "$ONE" | sed -n 's/.*<testcase[^>]*classname="\\([^"]*\\)".*<failure[^>]*>.*/\\1/p' | head -1 || true)
                SUITE=$(printf "%s" "$ONE" | sed -n 's/.*<testsuite[^>]*name="\\([^"]*\\)".*/\\1/p' | head -1 || true)
                MSG=$(printf "%s" "$ONE" | sed -n 's/.*<failure[^>]*message="\\([^"]*\\)".*/\\1/p' | head -1 || true)

                [ -n "${CLASS:-}" ] && SPEC="$CLASS" || SPEC="${SUITE:-unknown}"
                [ -n "${TEST_NAME:-}" ] || TEST_NAME="Unknown test"
                [ -n "${MSG:-}" ] || MSG="none"
              else
                echo "No JUnit XML found or no failures detected."
              fi

              SHORT_SPEC=$(basename "${SPEC:-unknown}" 2>/dev/null || echo "${SPEC:-unknown}")
              TITLE_BASE="E2E fail: ${SHORT_SPEC} — ${TEST_NAME}"
              BODY="Build: ${BUILD_URL} | Spec: ${SPEC} | Test: ${TEST_NAME} | Message: ${MSG}"

              TITLE_ESC=$(printf "%s" "$TITLE_BASE" | tr '\\n' ' ' | sed 's/\\\\/\\\\\\\\/g; s/"/\\\\\\"/g')
              BODY_ESC=$(printf "%s" "$BODY" | tr '\\n' ' ' | sed 's/\\\\/\\\\\\\\/g; s/"/\\\\\\"/g')
              JSON_PAYLOAD=$(printf '{"title":"%s","body":"%s","labels":["bug","e2e"]}' "$TITLE_ESC" "$BODY_ESC")

              echo "Posting issue to ${OWNER}/${REPO} …"
              HTTP=$(curl -sS -o resp.json -w '%{http_code}' \
                -H "Authorization: token ${GH_TOKEN}" \
                -H "Accept: application/vnd.github+json" \
                --data-binary "$JSON_PAYLOAD" \
                "https://api.github.com/repos/${OWNER}/${REPO}/issues" || true)

              echo "GitHub API HTTP status: $HTTP"
              if [ "$HTTP" -ge 200 ] && [ "$HTTP" -lt 300 ]; then
                ISSUE_URL=$(grep -o '"html_url": *"[^"]*"' resp.json | head -1 | cut -d'"' -f4 || true)
                echo "Created issue: ${ISSUE_URL:-<no url found>}"
              else
                echo "Create issue failed; response follows:"
                sed -n '1,200p' resp.json || true
                exit 1
              fi
            '''
          }
        }
      }
    }

    stage('Docker Cleanup') {
      steps {
        sh '''
          docker builder prune -af --filter "until=24h" || true
          docker image prune   -af --filter "until=24h" || true
          docker container prune -f --filter "until=24h" || true
          docker volume prune -f || true
          docker system df || true
        '''
      }
    }
  }

  post {
    always {
      archiveArtifacts artifacts: """
        ${CYPRESS_WORKDIR}/cypress/videos/**,
        ${CYPRESS_WORKDIR}/cypress/screenshots/**,
        ${CYPRESS_WORKDIR}/allure-results/**,
        ${CYPRESS_WORKDIR}/allure-report/**,
        ${JUNIT_DIR}/**
      """, excludes: '**/node_modules/**', allowEmptyArchive: true
      cleanWs(deleteDirs: true)
    }
  }
}
