pipeline {
  agent any

  environment {
    PROJECT_DIR = '/opt/wealth-tracking-framework'
    REACT_BUILD_VOLUME = 'wtf-react-build'
    REGISTRY = 'registry.gitlab.com'
  }

  stages {
    stage('Login to GitLab Registry') {
      steps {
        withCredentials([
          usernamePassword(
            credentialsId: 'gitlab-docker-login',
            usernameVariable: 'REGISTRY_USER',
            passwordVariable: 'REGISTRY_TOKEN'
          )
        ]) {
          sh '''
            echo "$REGISTRY_TOKEN" | docker login registry.gitlab.com -u "$REGISTRY_USER" --password-stdin
          '''
        }
      }
    }

    stage('Stop all containers') {
      steps {
        dir("${env.PROJECT_DIR}") {
          sh 'docker compose down || true'
        }
      }
    }

    stage('Clean Down React and NGINX') {
      steps {
        script {
          sh "docker volume rm -f ${env.REACT_BUILD_VOLUME} || true"

          def cleanupImages = [
            'registry.gitlab.com/wealth-tracking-framework/wealth-tracking-framework/wtf-react:latest',
            'nginx:alpine'
          ]

          cleanupImages.each { img ->
            sh "docker image rm -f ${img} || true"
          }
        }
      }
    }

    stage('Pull App Images (exclude Jenkins)') {
      steps {
        script {
          def appServices = [
            'wtf-node',
            'wtf-react',
            'wtf-nginx',
            'wtf-postgres',
            'wtf-coingecko',
            'wtf-finnhub'
          ]
          dir("${env.PROJECT_DIR}") {
            appServices.each { svc ->
              sh "docker compose -f docker-compose.yml pull ${svc} || true"
            }
          }
        }
      }
    }

    stage('Create React Volume') {
      steps {
        sh "docker volume create ${env.REACT_BUILD_VOLUME} || true"
      }
    }

    stage('Start App Services') {
      steps {
        script {
          def appServices = [
            'wtf-node',
            'wtf-react',
            'wtf-nginx',
            'wtf-postgres',
            'wtf-coingecko',
            'wtf-finnhub'
          ]
          dir("${env.PROJECT_DIR}") {
            appServices.each { svc ->
              sh "docker compose -f docker-compose.yml up -d --no-build ${svc}"
            }
          }
        }
      }
    }

    stage('Run DB Migrations') {
      steps {
        script {
          def maxTries = 5
          def attempt = 0
          def success = false
          while (attempt < maxTries && !success) {
            try {
              sh 'docker exec wtf-node npm run migrate'
              success = true
            } catch (err) {
              attempt++
              if (attempt == maxTries) {
                error("DB migrations failed after ${maxTries} attempts")
              }
              sleep 5
            }
          }
        }
      }
    }

    stage('Restart Fetchers') {
      steps {
        dir("${env.PROJECT_DIR}") {
          sh '''
            docker compose up -d --no-build wtf-coingecko || true
            docker compose up -d --no-build wtf-finnhub || true
          '''
        }
      }
    }

    stage('Set Permissions on React Build Directory') {
      steps {
        sh "chmod -R 0755 ${env.PROJECT_DIR}/wtf-react/build || true"
      }
    }
  }

  post {
    success {
      echo "WTF services redeployed (excluding Jenkins)."
    }
    failure {
      echo "Deployment failed."
    }
  }
}
