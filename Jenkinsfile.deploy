environment {
  PROJECT_DIR = '/opt/wealth-tracking-framework'
  REACT_BUILD_VOLUME = 'wtf-react-build'
  REGISTRY = 'registry.gitlab.com'
  REGISTRY_USER = credentials('gitlab_user')
  REGISTRY_TOKEN = credentials('gitlab-registry-pat')
}

def cleanupImages = [
  'registry.gitlab.com/wealth-tracking-framework/wealth-tracking-framework/wtf-react:latest',
  'nginx:alpine'
]

def appServices = [
  'wtf-node',
  'wtf-react',
  'wtf-nginx',
  'wtf-postgres',
  'wtf-coingecko',
  'wtf-finnhub'
]

pipeline {
  agent any

  stages {
    stage('Login to Registry') {
      steps {
        sh '''
          echo $REGISTRY_TOKEN | docker login -u $REGISTRY_USER --password-stdin $REGISTRY
        '''
      }
    }

    stage('Stop all containers') {
      steps {
        dir("${PROJECT_DIR}") {
          sh 'docker compose down || true'
        }
      }
    }

    stage('Clean Down React and NGINX') {
      steps {
        sh "docker volume rm -f ${REACT_BUILD_VOLUME} || true"
        script {
          cleanupImages.each { img ->
            sh "docker image rm -f ${img} || true"
          }
        }
      }
    }

    stage('Pull App Images (exclude Jenkins)') {
      steps {
        dir("${PROJECT_DIR}") {
          script {
            appServices.each { svc ->
              sh "docker compose -f docker-compose.yml pull ${svc} || true"
            }
          }
        }
      }
    }

    stage('Create React Volume') {
      steps {
        sh "docker volume create ${REACT_BUILD_VOLUME} || true"
      }
    }

    stage('Start App Services') {
      steps {
        dir("${PROJECT_DIR}") {
          script {
            appServices.each { svc ->
              sh "docker compose -f docker-compose.yml up -d --no-build ${svc}"
            }
          }
        }
      }
    }

    stage('Run DB Migrations') {
      steps {
        script {
          def maxTries = 5
          def attempt = 0
          def success = false
          while (attempt < maxTries && !success) {
            try {
              sh 'docker exec wtf-node npm run migrate'
              success = true
            } catch (err) {
              attempt++
              if (attempt == maxTries) {
                error("DB migrations failed after ${maxTries} attempts")
              }
              sleep 5
            }
          }
        }
      }
    }

    stage('Restart Fetchers') {
      steps {
        dir("${PROJECT_DIR}") {
          sh '''
            docker compose up -d --no-build wtf-coingecko || true
            docker compose up -d --no-build wtf-finnhub || true
          '''
        }
      }
    }

    stage('Set Permissions on React Build Directory') {
      steps {
        sh 'chmod -R 0755 ${PROJECT_DIR}/wtf-react/build || true'
      }
    }
  }

  post {
    success {
      echo "WTF services redeployed (excluding Jenkins)."
    }
    failure {
      echo "Deployment failed."
    }
  }
}
