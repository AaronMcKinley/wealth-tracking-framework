pipeline {
  agent any

  environment {
    PROJECT_DIR = "${WORKSPACE}"
    REACT_BUILD_VOLUME = 'wtf-react-build'
    REGISTRY = 'registry.gitlab.com'
  }

  stages {
    stage('Login to GitLab Registry') {
      steps {
        withCredentials([
          usernamePassword(
            credentialsId: 'gitlab-docker-login',
            usernameVariable: 'REGISTRY_USER',
            passwordVariable: 'REGISTRY_TOKEN'
          )
        ]) {
          sh '''
            echo "$REGISTRY_TOKEN" | docker login $REGISTRY -u "$REGISTRY_USER" --password-stdin
          '''
        }
      }
    }

    stage('Create .env') {
      steps {
        withCredentials([
          string(credentialsId: 'pg-user', variable: 'PGUSER'),
          string(credentialsId: 'pg-password', variable: 'PGPASSWORD'),
          string(credentialsId: 'pg-database', variable: 'PGDATABASE')
        ]) {
          writeFile file: '.env', text: """\
            PGUSER=${PGUSER}
            PGPASSWORD=${PGPASSWORD}
            PGDATABASE=${PGDATABASE}
            PGHOST=wtf-postgres
          """.stripIndent()
        }
      }
    }

    stage('Stop App Containers') {
      steps {
        script {
          def appServices = [
            'wtf-node',
            'wtf-react',
            'wtf-nginx',
            'wtf-postgres',
            'wtf-coingecko',
            'wtf-finnhub'
          ]
          dir("${env.PROJECT_DIR}") {
            appServices.each { svc ->
              sh "docker rm -f ${svc} || true"
            }
          }
        }
      }
    }

    stage('Clean Down React and NGINX') {
      steps {
        script {
          sh "docker volume rm -f ${env.REACT_BUILD_VOLUME} || true"

          def cleanupImages = [
            'registry.gitlab.com/wealth-tracking-framework/wealth-tracking-framework/wtf-react:latest',
            'nginx:alpine'
          ]

          cleanupImages.each { img ->
            sh "docker image rm -f ${img} || true"
          }
        }
      }
    }

    stage('Pull App Images (exclude Jenkins)') {
      steps {
        script {
          def appServices = [
            'wtf-node',
            'wtf-react',
            'wtf-nginx',
            'wtf-postgres',
            'wtf-coingecko',
            'wtf-finnhub'
          ]
          dir("${env.PROJECT_DIR}") {
            appServices.each { svc ->
              sh "docker compose pull ${svc} || true"
            }
          }
        }
      }
    }

    stage('Create React Volume') {
      steps {
        sh "docker volume create ${env.REACT_BUILD_VOLUME} || true"
      }
    }

    stage('Start App Services') {
      steps {
        script {
          def appServices = [
            'wtf-node',
            'wtf-react',
            'wtf-nginx',
            'wtf-postgres',
            'wtf-coingecko',
            'wtf-finnhub'
          ]
          dir("${env.PROJECT_DIR}") {
            sh "docker compose up -d --no-build ${appServices.join(' ')}"
          }
        }
      }
    }

    stage('Run DB Migrations') {
      steps {
        script {
          def maxTries = 5
          def attempt = 0
          def success = false
          while (attempt < maxTries && !success) {
            try {
              sh 'docker exec wtf-node npm run migrate'
              success = true
            } catch (err) {
              attempt++
              if (attempt == maxTries) {
                error("DB migrations failed after ${maxTries} attempts")
              }
              sleep 5
            }
          }
        }
      }
    }

    stage('Restart Fetchers') {
      steps {
        dir("${env.PROJECT_DIR}") {
          sh '''
            docker compose up -d --no-build wtf-coingecko || true
            docker compose up -d --no-build wtf-finnhub || true
          '''
        }
      }
    }

    stage('Set Permissions on React Build Directory') {
      steps {
        sh "chmod -R 0755 ${env.PROJECT_DIR}/wtf-react/build || true"
      }
    }
  }

  post {
    success {
      echo "WTF app services deployed successfully. Jenkins remains running."
    }
    failure {
      echo "Deployment failed. Check logs for details."
    }
  }
}
