---
- name: Setup WTF project on Ubuntu server
  hosts: all
  become: yes
  vars_files:
    - secrets.yml

  vars:
    project_dir: /opt/wealth-tracking-framework
    compose_version: v2.27.0
    ansible_user_home: "/home/{{ ansible_user }}"
    public_ssh_key: "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIEEXAMPLEKEYyourpublickeyhere user@machine"
    build_local: false   # Set to true if you need to build images locally

  tasks:
    - name: Fail if not running on Ubuntu
      fail:
        msg: "This playbook only supports Ubuntu. Detected {{ ansible_distribution }} {{ ansible_distribution_version }}."
      when: ansible_distribution != "Ubuntu"

    - name: Update apt cache and upgrade all packages
      apt:
        update_cache: yes
        upgrade: dist

    - name: Remove any old Docker versions
      apt:
        name:
          - docker.io
          - docker-doc
          - docker-compose
          - containerd
          - runc
        state: absent
        purge: yes
      ignore_errors: true

    - name: Cleanup old Docker directories
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /var/lib/docker
        - /var/lib/containerd

    - name: Install Docker CE prerequisites
      apt:
        name:
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present
        update_cache: yes

    - name: Add Dockerâ€™s official GPG key
      shell: |
        install -m 0755 -d /etc/apt/keyrings
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
        chmod a+r /etc/apt/keyrings/docker.gpg
      args:
        creates: /etc/apt/keyrings/docker.gpg

    - name: Add Docker APT repo (stable)
      shell: |
        echo \
          "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
          $(lsb_release -cs) stable" > /etc/apt/sources.list.d/docker.list
      args:
        creates: /etc/apt/sources.list.d/docker.list

    - name: Update apt cache for Docker repo
      apt:
        update_cache: yes

    - name: Install Docker CE with plugins
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present

    - name: Ensure docker service is started and enabled
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Verify Docker version
      command: docker --version

    - name: Verify buildx installation
      command: docker buildx version

    - name: Verify docker compose plugin
      command: docker compose version

    - name: Add ansible user to docker group
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes

    - name: Ensure .ssh directory exists
      file:
        path: "{{ ansible_user_home }}/.ssh"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0700'

    - name: Add public SSH key to authorized_keys
      authorized_key:
        user: "{{ ansible_user }}"
        key: "{{ public_ssh_key }}"
        state: present

    - name: Setup UFW default policies
      ufw:
        state: reset

    - name: Allow SSH through UFW
      ufw:
        rule: allow
        name: OpenSSH

    - name: Allow HTTP through UFW
      ufw:
        rule: allow
        port: 80

    - name: Allow HTTPS through UFW
      ufw:
        rule: allow
        port: 443

    - name: Check if UFW is active
      command: ufw status
      register: ufw_status
      changed_when: false

    - name: Enable UFW if not active
      expect:
        command: ufw enable
        responses:
          'Command may disrupt existing ssh connections. Proceed with operation (y|n)?': 'y'
      when: "'Status: active' not in ufw_status.stdout"

    - name: Create project directory
      file:
        path: "{{ project_dir }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'

    - name: Create .env from template
      template:
        src: env.j2
        dest: "{{ project_dir }}/.env"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0600'
        force: yes

    - name: Pull latest Docker images
      shell: docker compose pull
      args:
        chdir: "{{ project_dir }}"

    - name: Build local images if needed
      shell: docker compose build
      args:
        chdir: "{{ project_dir }}"
      when: build_local|default(false)

    - name: Start containers with Docker Compose
      shell: docker compose up -d
      args:
        chdir: "{{ project_dir }}"

    - name: Run DB migrations (if needed)
      shell: docker compose run --rm wtf-node npm run migrate
      args:
        chdir: "{{ project_dir }}"
      ignore_errors: yes

    - name: Show Docker Compose service status
      shell: docker compose ps
      args:
        chdir: "{{ project_dir }}"
