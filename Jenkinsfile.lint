pipeline {
  agent {
    docker {
      image 'node:20-alpine'
      args '-v $WORKSPACE/.npm:/root/.npm'
    }
  }

  options {
    timestamps()
    buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '0'))
  }

  environment {
    REPO      = 'AaronMcKinley/wealth-tracking-framework'
    LINT_JSON = 'lint-report.json'
  }

  stages {
    stage('Checkout') { steps { checkout scm } }

    stage('Install') {
      steps {
        sh '''
          set -e
          apk add --no-cache git jq curl >/dev/null
          npm ci --ignore-scripts --no-audit
        '''
      }
    }

    stage('Run ESLint') {
      steps {
        sh '''
          set +e
          npx eslint . --ext .js,.jsx,.ts,.tsx -f json -o "$LINT_JSON"
          set -e
        '''
      }
    }

    stage('Summarize') {
      steps {
        sh '''
          ERRORS=$(jq '[.[] | .errorCount] | add // 0' "$LINT_JSON" 2>/dev/null || echo 0)
          WARNINGS=$(jq '[.[] | .warningCount] | add // 0' "$LINT_JSON" 2>/dev/null || echo 0)
          jq -n --arg errors "$ERRORS" --arg warnings "$WARNINGS" \
                --arg branch "${BRANCH_NAME:-detached}" \
                --arg sha "$(git rev-parse --short=8 HEAD || echo unknown)" \
                '{errors:($errors|tonumber), warnings:($warnings|tonumber), branch:$branch, sha:$sha}' \
                > lint-counts.json
        '''
      }
    }

    stage('Create GitHub Issue if Needed') {
      steps {
        withCredentials([string(credentialsId: 'GH_TOKEN', variable: 'GH_TOKEN')]) {
          sh '''
            set -e
            ERRORS=$(jq -r '.errors' lint-counts.json)
            WARNINGS=$(jq -r '.warnings' lint-counts.json)
            COUNT=$(( ERRORS + WARNINGS ))
            if [ "$COUNT" -le 0 ]; then
              echo "No lint issues. Skipping ticket."
              exit 0
            fi

            BRANCH=$(jq -r '.branch' lint-counts.json)
            SHA=$(jq -r '.sha' lint-counts.json)

            TITLE="[lint] ${BRANCH} ESLint issues"
            BODY="Branch: ${BRANCH}
Commit: ${GIT_COMMIT}
Errors: ${ERRORS}
Warnings: ${WARNINGS}

Artifacts:
- ${BUILD_URL}artifact/${LINT_JSON}
- ${BUILD_URL}artifact/lint-counts.json

lint-branch:${BRANCH}
"

            API="https://api.github.com/repos/${REPO}"
            AUTH="Authorization: token ${GH_TOKEN}"
            ACCEPT="Accept: application/vnd.github+json"

            Q="repo:${REPO} is:issue is:open in:title ${TITLE}"
            Q_ENC=$(jq -rn --arg q "$Q" '$q|@uri')
            EXIST=$(curl -s -H "$AUTH" -H "$ACCEPT" "${API}/search/issues?q=${Q_ENC}" | jq -r '.total_count // 0')

            if [ "$EXIST" -gt 0 ]; then
              echo "Open lint issue already exists for ${BRANCH}. Skipping create."
              exit 0
            fi

            curl -s -X POST -H "$AUTH" -H "$ACCEPT" \
              "${API}/issues" \
              -d "$(jq -n --arg title "$TITLE" --arg body "$BODY" \
                    '{title:$title, body:$body, labels:["lint","eslint","automated"]}')" >/dev/null
            echo "Created GitHub issue: $TITLE"
          '''
        }
      }
    }
  }

  post {
    always {
      archiveArtifacts artifacts: 'lint-*.json', allowEmptyArchive: true, fingerprint: true
      cleanWs(deleteDirs: true)
    }
  }
}
