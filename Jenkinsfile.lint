pipeline {
  agent {
    docker {
      image 'node:20-alpine'
      args '-v $WORKSPACE/.npm:/root/.npm'
    }
  }

  options {
    timestamps()
    buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '0'))
  }

  environment {
    REPO      = 'AaronMcKinley/wealth-tracking-framework'
    LINT_JSON = 'lint-report.json'
  }

  stages {
    stage('Checkout') { steps { checkout scm } }

    stage('Install') {
      steps {
        sh '''
          set -e
          apk add --no-cache git jq curl >/dev/null
          npm ci --ignore-scripts --no-audit
        '''
      }
    }

    stage('Run ESLint') {
      steps {
        sh '''
          set +e
          npx eslint . --ext .js,.jsx,.ts,.tsx -f json -o "$LINT_JSON"
          set -e
        '''
      }
    }

    stage('Summarize') {
      steps {
        sh '''
          ERRORS=$(jq '[.[] | .errorCount] | add // 0' "$LINT_JSON" 2>/dev/null || echo 0)
          WARNINGS=$(jq '[.[] | .warningCount] | add // 0' "$LINT_JSON" 2>/dev/null || echo 0)
          jq -n --arg errors "$ERRORS" --arg warnings "$WARNINGS" \
                --arg branch "${BRANCH_NAME:-detached}" \
                --arg sha "$(git rev-parse --short=8 HEAD || echo unknown)" \
                '{errors:($errors|tonumber), warnings:($warnings|tonumber), branch:$branch, sha:$sha}' \
                > lint-counts.json

          if [ -s "$LINT_JSON" ]; then
            jq -r '
              [ .[] | select((.messages // []) | length > 0) |
                { file: .filePath,
                  lines: ( [ (.messages // [])[]
                            | { line: (.line // 0),
                                col:  (.column // 0),
                                sev:  (if (.severity // 1) == 2 then "error" else "warning" end),
                                rule: (.ruleId // "-"),
                                msg:  (.message // "") }
                          ]
                          | sort_by(.line, .col)
                          | map("  " + ((.line|tostring) + ":" + (.col|tostring)) + "  " + .sev + "  " + .msg + "  " + .rule)
                        )
                }
              ]
              | sort_by(.file)
              | map(.file + "\\n" + (.lines | join("\\n")))
              | join("\\n\\n")
            ' "$LINT_JSON" > lint-stylish.txt || echo "Failed to parse lint-report.json" > lint-stylish.txt
          else
            echo "No lint results" > lint-stylish.txt
          fi
        '''
      }
    }

    stage('Create/Rotate GitHub Issue (by counts)') {
      steps {
        withCredentials([string(credentialsId: 'GH_TOKEN', variable: 'GH_TOKEN')]) {
          sh '''
            set -e
            ERRORS=$(jq -r '.errors' lint-counts.json)
            WARNINGS=$(jq -r '.warnings' lint-counts.json)
            BRANCH=$(jq -r '.branch' lint-counts.json)
            SHA=$(jq -r '.sha' lint-counts.json)

            TITLE_BASE="[lint] ${BRANCH}"
            NEW_TITLE="${TITLE_BASE} E:${ERRORS} W:${WARNINGS} @ ${SHA}"
            BODY="Branch: ${BRANCH}
Commit: ${GIT_COMMIT}
Errors: ${ERRORS}
Warnings: ${WARNINGS}

Artifacts:
- ${BUILD_URL}artifact/${LINT_JSON}
- ${BUILD_URL}artifact/lint-counts.json
- ${BUILD_URL}artifact/lint-stylish.txt
"

            API="https://api.github.com/repos/${REPO}"
            AUTH="Authorization: token ${GH_TOKEN}"
            ACCEPT="Accept: application/vnd.github+json"

            OPEN_JSON=$(curl -s -H "$AUTH" -H "$ACCEPT" "${API}/issues?state=open&labels=lint&per_page=100")

            RECENT_NUM=$(echo "$OPEN_JSON" | jq -r --arg base "$TITLE_BASE" \
              '[.[] | select(.title | startswith($base))] | sort_by(.created_at) | last | .number // empty')
            RECENT_TITLE=$(echo "$OPEN_JSON" | jq -r --arg base "$TITLE_BASE" \
              '[.[] | select(.title | startswith($base))] | sort_by(.created_at) | last | .title // empty')

            if [ -n "$RECENT_NUM" ]; then
              READ_EW=$(echo "$RECENT_TITLE" | sed -n 's/.*E:\\([0-9][0-9]*\\) W:\\([0-9][0-9]*\\).*/\\1 \\2/p')
              if [ -z "$READ_EW" ]; then
                RECENT_E=-1; RECENT_W=-1
              else
                RECENT_E=$(echo "$READ_EW" | awk "{print \\$1}")
                RECENT_W=$(echo "$READ_EW" | awk "{print \\$2}")
              fi

              if [ "$RECENT_E" = "$ERRORS" ] && [ "$RECENT_W" = "$WARNINGS" ]; then
                curl -s -X PATCH -H "$AUTH" -H "$ACCEPT" \
                  "${API}/issues/${RECENT_NUM}" \
                  -d "$(jq -n --arg t "$NEW_TITLE" '{title:$t}')" >/dev/null

                curl -s -X POST -H "$AUTH" -H "$ACCEPT" \
                  "${API}/issues/${RECENT_NUM}/comments" \
                  -d "$(jq -n --arg body "$BODY" '{body:$body}')" >/dev/null

                DUPES=$(echo "$OPEN_JSON" | jq -r --arg base "$TITLE_BASE" --arg keep "$RECENT_NUM" \
                  '[.[] | select(.title | startswith($base)) | .number] | map(tostring) | map(select(. != $keep)) | .[]?')
                if [ -n "$DUPES" ]; then
                  echo "$DUPES" | while read n; do
                    [ -z "$n" ] || curl -s -X PATCH -H "$AUTH" -H "$ACCEPT" \
                      "${API}/issues/$n" -d '{"state":"closed"}' >/dev/null
                  done
                fi

                echo "Updated issue #${RECENT_NUM} (counts unchanged)."
              else
                TO_CLOSE=$(echo "$OPEN_JSON" | jq -r --arg base "$TITLE_BASE" \
                  '[.[] | select(.title | startswith($base)) | .number] | .[]?')
                if [ -n "$TO_CLOSE" ]; then
                  echo "$TO_CLOSE" | while read n; do
                    [ -z "$n" ] || curl -s -X PATCH -H "$AUTH" -H "$ACCEPT" \
                      "${API}/issues/$n" -d '{"state":"closed"}' >/dev/null
                  done
                fi

                PAYLOAD=$(jq -n --arg title "$NEW_TITLE" --arg body "$BODY" \
                  '{title:$title, body:$body, labels:["lint","eslint","automated"]}')
                curl -s -X POST -H "$AUTH" -H "$ACCEPT" \
                  "${API}/issues" -d "$PAYLOAD" >/dev/null

                echo "Counts changed. Closed old issue(s) and created: $NEW_TITLE"
              fi
            else
              PAYLOAD=$(jq -n --arg title "$NEW_TITLE" --arg body "$BODY" \
                '{title:$title, body:$body, labels:["lint","eslint","automated"]}')
              curl -s -X POST -H "$AUTH" -H "$ACCEPT" \
                "${API}/issues" -d "$PAYLOAD" >/dev/null
              echo "No existing issue. Created: $NEW_TITLE"
            fi
          '''
        }
      }
    }
  }

  post {
    always {
      archiveArtifacts artifacts: 'lint-*.json,lint-stylish.txt', allowEmptyArchive: true, fingerprint: true
      cleanWs(deleteDirs: true)
    }
  }
}
